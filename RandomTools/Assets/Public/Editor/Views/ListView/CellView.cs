using System.Collections;
using System.Collections.Generic;

using UnityEngine;
using UnityEditor;

namespace PizzaPie.Editor.Views
{
    /// <summary>
    /// Base class of List View's cell representation
    /// </summary>
    /// <typeparam name="T"></typeparam>
    public abstract class CellView<T> where T : class
    {
        /// <summary>
        /// Get dimensions of CellView.
        /// </summary>
        public Vector2 GetDimensions { get { return dimensions; } }
        protected Vector2 dimensions;
        
        private const float doubleClickTime = 0.3f;
        private int clickCount;
        private double clickTimer;

        #region ctors
        /// <summary>
        /// Create new CellView with specific dimensions, dimensions disregarded if are smaller than view rect assigned to Cell View.
        /// </summary>
        /// <param name="dimensions"></param>
        public CellView(Vector2 dimensions)
        {
            dimensions.y = dimensions.y > EditorGUIUtility.singleLineHeight ? dimensions.y : EditorGUIUtility.singleLineHeight;
            this.dimensions = dimensions;
        }
        #endregion

        /// <summary>
        /// Display Cell, should be called inside OnGUI callback.
        /// </summary>
        /// <param name="data">The data set represented inside the CellView.</param>
        /// <param name="viewRect">The Rect of the Cell.</param>
        /// <param name="padding">Padding set by ListView for better click response.</param>
        /// <param name="e">Event.Current generated by Unity Editor.</param>
        /// <param name="IsSelected">Current state of cell.</param>
        /// <param name="IsDoubleClick">Get if cell has been double clicked in last update.</param>
        public void OnGUI(T data, Rect viewRect, Vector2 padding, Event e, ref bool IsSelected, out bool IsDoubleClick)
        {
            IsDoubleClick = false;
            Rect clickRect = viewRect;
            clickRect.height += padding.y;

            if (e.type == EventType.MouseUp && clickRect.Contains(e.mousePosition))
            {
                clickCount++;
                if (clickCount >= 2 && EditorApplication.timeSinceStartup - clickTimer <= doubleClickTime)
                {
                    IsDoubleClick = true;
                    clickCount = 0;

                    OnDoubleClick(IsSelected);
                }

                clickTimer = EditorApplication.timeSinceStartup;
                if (!IsDoubleClick)
                {
                    IsSelected = !IsSelected;
                    OnClick(IsSelected);
                }
                EditorWindow.focusedWindow.Repaint();
            }

            OnGUIInternal(data, viewRect, IsSelected, e);
        }

        /// <summary>
        /// Define the looks of the Cell.
        /// </summary>
        /// <param name="data"></param>
        /// <param name="viewRect"></param>
        /// <param name="isSelected"></param>
        /// <param name="e"></param>
        protected abstract void OnGUIInternal(T data, Rect viewRect, bool isSelected, Event e);

        /// <summary>
        /// Deep clone of CellView.
        /// </summary>
        /// <returns></returns>
        public abstract CellView<T> Clone();

        /// <summary>
        /// Override to pick click event.
        /// </summary>
        /// <param name="isSelected"></param>
        protected virtual void OnClick(bool isSelected)
        {
        }

        /// <summary>
        /// Override to pick Double Click event.
        /// </summary>
        /// <param name="isSelected"></param>
        protected virtual void OnDoubleClick(bool isSelected)
        {
        }

    }


}
