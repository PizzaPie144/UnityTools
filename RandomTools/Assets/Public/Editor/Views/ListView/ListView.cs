using System;
using System.Collections.Generic;
using System.Linq;

using UnityEngine;
using UnityEditor;

/// <summary>
/// Contains GUI views.
/// </summary>
namespace PizzaPie.Editor.Views
{
    /// <summary>
    /// View to present a scrollable list of Cell Views representing specific data sets.
    /// </summary>
    /// <typeparam name="T"></typeparam>
    public class ListView<T> where T : class
    {
        private List<T> items;
        private CellView<T> cellView;       //serves as template

        private List<DataViewPair> dataViewPairs;
        private List<DataViewPair> pairsPool;

        private SelectionType selectionType;
        private IComparer<T> comparer;

        private Rect position;
        private Rect viewRect;

        private int maxVisibleElements { get { return Mathf.RoundToInt(viewRect.height / (cellView.GetDimensions.y + verticalCellPadding)); } }
        private float totalHeight { get { return (items.Count + 1) * (verticalCellPadding + cellView.GetDimensions.y); } }

        private float yPosition;

        //Settings
        private readonly float verticalCellPadding = 2f;
        private readonly float horizontalCellPadding = 2f;
        private readonly float scrollSpeed = 10f;
        private readonly float scrollThresshold = 0.5f;


        /// <summary>
        /// Use to pick Cell Double Clicked event.
        /// </summary>
        public event EventHandler<OnSelectionEventArgs> CellDoubleClicked;

        /// <summary>
        /// Use to pick Cell Clicked event.
        /// </summary>
        public event EventHandler<OnCellClickedEventArgs> CellClicked;

        #region ctors
        public ListView(List<T> items, CellView<T> cellView, IComparer<T> comparer, SelectionType selectionType, bool autoSort = false)
        {
            this.items = items;
            this.cellView = cellView;
            this.selectionType = selectionType;
            dataViewPairs = new List<DataViewPair>();
            pairsPool = new List<DataViewPair>();
            this.comparer = comparer;
            foreach (var item in items)
            {
                dataViewPairs.Add(new DataViewPair(item, cellView.Clone(), comparer));
            }

            CellClicked += OnCellClickedHandler;
            CellDoubleClicked += OnCellDoubleClickedHandler;

            if (autoSort)
                SortListViewCells();
        }
        #endregion

        /// <summary>
        /// Use inside OnGUI call back method to display the ListView.
        /// </summary>
        /// <param name="viewRect">ViewRect where to draw the ListView.</param>
        /// <param name="e">GUI event generated by UnityEditor.</param>
        public virtual void OnGUI(Rect viewRect, Event e)
        {
            GUI.BeginGroup(viewRect);
            this.viewRect = viewRect;

            if (items == null || items.Count == 0)
            {
                GUI.EndGroup();
                return;
            }

            Rect scrollBarRect = new Rect(viewRect.width - 15f, 0, 15f, viewRect.height);
            float fixedSize = GUI.skin.verticalScrollbarDownButton.fixedHeight;

            float scrollBarSize = 1f; //viewRect.height/totalHeight

            yPosition = GUI.VerticalScrollbar(scrollBarRect, yPosition, scrollBarSize, 0, Mathf.Max(totalHeight - viewRect.height - cellView.GetDimensions.y));
            int topIndex = GetFirstVisibleIndex(yPosition);
            float trueYPos = (topIndex) * (cellView.GetDimensions.y + verticalCellPadding);
            float offsetY = trueYPos - yPosition;
            int lastPos = GetLastVisibleIndex(topIndex);

            if (maxVisibleElements > items.Count)
            {
                yPosition = 0;
            }

            for (int i = topIndex; i < lastPos; i++)
            {
                float ypos = (i - topIndex) * (verticalCellPadding + cellView.GetDimensions.y) + offsetY;
                float width = Mathf.Max(cellView.GetDimensions.x, -viewRect.position.x + scrollBarRect.position.x - horizontalCellPadding);
                Rect cellRect = new Rect(horizontalCellPadding, ypos, width, cellView.GetDimensions.y);

                bool isDoubleClick;
                bool selectionStateChanged = dataViewPairs[i].OnCellGUI(cellRect, new Vector2(horizontalCellPadding, verticalCellPadding), e, out isDoubleClick);

                if (selectionStateChanged)
                {
                    OnCellClicked(this, dataViewPairs[i]);

                    if (selectionType == SelectionType.single)
                        foreach (var pair in dataViewPairs)
                            if (pair.IsSelected && pair.Data != dataViewPairs[i].Data)
                            {
                                pair.SelectCell(false);
                                OnCellClicked(this, pair);
                            }
                }

                if (isDoubleClick)
                    OnCellDoubleClicked(this, dataViewPairs[i].Data);
            }


            GUI.EndGroup();

            if (e.type == EventType.ScrollWheel && Mathf.Abs(e.delta.y) > scrollThresshold)
            {
                yPosition += e.delta.y * scrollSpeed;
                yPosition = Mathf.Clamp(yPosition, 0, totalHeight - viewRect.height);
                e.Use();

                EditorWindow.focusedWindow.Repaint();
            }
        }

        /// <summary>
        /// Use to update the data of the ListView, selected items will preserve their state.
        /// </summary>
        /// <param name="items">The new data set to be presented by the ListView.</param>
        public void UpdateData(List<T> items)
        {
            IEnumerable<T> onlyInOld = this.items.Except<T>(items);            
            IEnumerable<T> onlyInNew = items.Except<T>(this.items);            
            int dif = 0;                                                                                                 
            foreach (var old in onlyInOld)
            {
                dif++;
                for (int i = 0; i < dataViewPairs.Count; i++)
                {
                    if (dataViewPairs[i].Data == old)
                    {
                        DataViewPair p = dataViewPairs[i];
                        pairsPool.Add(p);
                        dataViewPairs.RemoveAt(i);
                        break;
                    }
                }
            }
            //add new elements
            foreach (var item in onlyInNew)
            {
                dif--;
                bool exists = false;
                for (int i = 0; i < pairsPool.Count; i++)
                {
                    if (pairsPool[i].Data == item)
                    {
                        exists = true;
                        DataViewPair p = pairsPool[i];
                        dataViewPairs.Add(p);
                        pairsPool.RemoveAt(i);
                        break;
                    }
                }
                if (!exists)
                    //does not exist create a new one
                    dataViewPairs.Add(new DataViewPair(item, cellView.Clone(), comparer));
            }

            this.items.Clear();
            this.items.AddRange(items);

            //Adjust position of scroll view
            yPosition -= dif * (cellView.GetDimensions.y + verticalCellPadding);
            yPosition = Mathf.Clamp(yPosition, 0, yPosition);

            dataViewPairs.Sort();

            EditorWindow.focusedWindow.Repaint();
        }

        /// <summary>
        /// Get all selected items.
        /// </summary>
        public List<T> GetSelectedItems
        {
            get
            {
                List<T> selected = new List<T>();
                foreach (var pair in dataViewPairs)
                    if (pair.IsSelected)
                        selected.Add(pair.Data);

                return selected;
            }
        }

        /// <summary>
        /// Select item. If SelectionType is Single, other selected items will unselected.
        /// </summary>
        /// <param name="item">Item to select.</param>
        public void Select(T item)
        {
            if (selectionType == SelectionType.single)
                UnselectAll();

            foreach (var pair in dataViewPairs)
                if (pair.Data == item)
                    pair.SelectCell(true);

            foreach (var pair in pairsPool)
                if (pair.Data == item)
                    pair.SelectCell(true);
        }

        /// <summary>
        /// Uselect all items.
        /// </summary>
        public void UnselectAll()
        {
            foreach (var pair in dataViewPairs)
                pair.SelectCell(false);

            foreach (var pair in pairsPool)
                pair.SelectCell(false);
        }

        /// <summary>
        /// Sort CellViews based on assigned IComparer.
        /// </summary>
        public void SortListViewCells()
        {
            dataViewPairs.Sort();
        }

        private int GetFirstVisibleIndex(float yPosition)
        {
            int topIndex = (int)(yPosition / (cellView.GetDimensions.y + verticalCellPadding));
            return Mathf.Clamp(Mathf.Clamp(topIndex, 0, topIndex), topIndex, items.Count - 1);
        }

        private int GetLastVisibleIndex(int startIndex)
        {
            int lastIndex = startIndex + maxVisibleElements;
            return Mathf.Clamp(lastIndex, lastIndex, items.Count);
        }

        private void OnCellDoubleClicked(object sender, T item)
        {
            if (CellDoubleClicked == null)
                return;

            CellDoubleClicked(this, new OnSelectionEventArgs(new List<T>() { item }));
        }

        private void OnCellClicked(object sender, DataViewPair pair)
        {
            if (CellClicked == null)
                return;

            CellClicked(this, new OnCellClickedEventArgs(pair.Data, pair.IsSelected));
        }

        /// <summary>
        /// Override to handler Cell Clicked event.
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        protected virtual void OnCellClickedHandler(object sender, OnCellClickedEventArgs e)
        {
        }

        /// <summary>
        /// Override to handler Cell Double Clicked event.
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        protected virtual void OnCellDoubleClickedHandler(object sender, OnSelectionEventArgs e)
        {
        }

        /// <summary>
        /// Class to pair CellViews and items.
        /// </summary>
        private class DataViewPair : IComparable<DataViewPair>
        {
            public T Data { get; private set; }

            public CellView<T> CellView { get; set; }
            public bool IsSelected { get { return isSelected; } }

            private bool isSelected;

            private IComparer<T> comparer;

            #region ctors
            public DataViewPair(T data, CellView<T> cellView, IComparer<T> comparer, bool isSelected = false)
            {
                Data = data;
                CellView = cellView;
                this.isSelected = isSelected;
                this.comparer = comparer;
            }
            #endregion
            public bool OnCellGUI(Rect viewRect, Vector2 padding, Event e, out bool isDoubleClick)
            {
                bool tempSelected = isSelected;
                CellView.OnGUI(Data, viewRect, padding, e, ref isSelected, out isDoubleClick);

                if (tempSelected != isSelected)
                    return true;

                return false;
            }

            public void SelectCell(bool select)
            {
                isSelected = select;
            }

            public int CompareTo(DataViewPair other)
            {
                return comparer.Compare(this.Data, other.Data);
            }
        }

        public class OnCellClickedEventArgs : EventArgs
        {
            public T CellData { get; private set; }
            public bool IsSelected { get; private set; }

            public OnCellClickedEventArgs(T cellData, bool isSelected)
            {
                CellData = cellData;
                IsSelected = isSelected;
            }
        }

        public class OnSelectionEventArgs : EventArgs
        {
            public List<T> selectedItems { get; private set; }

            public OnSelectionEventArgs(List<T> selectedItems)
            {
                this.selectedItems = selectedItems;
            }
        }
    }
}